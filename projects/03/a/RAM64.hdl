// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
	/* Need 8 RAM8's, where the top part of the address picks which RAM8 to use,
	 * and the low part of the address picks which address in the RAM8 to use */
	DMux8Way(
		in=load, sel=address[3..5],
		a=load0, b=load1, c=load2, d=load3,
		e=load4, f=load5, g=load6, h=load7);

	Mux8Way16(
		out=out, sel=address[3..5],
		a=bankout000, b=bankout001, c=bankout010, d=bankout011,
		e=bankout100, f=bankout101, g=bankout110, h=bankout111);

	RAM8(in=in, address=address[0..2], load=load0, out=bankout000);
	RAM8(in=in, address=address[0..2], load=load1, out=bankout001);
	RAM8(in=in, address=address[0..2], load=load2, out=bankout010);
	RAM8(in=in, address=address[0..2], load=load3, out=bankout011);
	RAM8(in=in, address=address[0..2], load=load4, out=bankout100);
	RAM8(in=in, address=address[0..2], load=load5, out=bankout101);
	RAM8(in=in, address=address[0..2], load=load6, out=bankout110);
	RAM8(in=in, address=address[0..2], load=load7, out=bankout111);
	
}
